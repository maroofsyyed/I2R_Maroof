# -*- coding: utf-8 -*-
"""actor: lin_lin_lin(256,256) and critic: hebb_lin_lin(256,256).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zlSPYLpbmHhPzLXCWuHUBR0AYbjw_GlQ
"""

class ModulatedPlasticDense(nn.Module):
    def __init__(self, in_features, out_features, clip=2.0):
        super().__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.clip = clip
        self.weight = nn.Parameter(torch.Tensor(in_features + 1, out_features))
        self.alpha = nn.Parameter(torch.Tensor(in_features + 1, out_features))
        self.ln = nn.LayerNorm(out_features)
        self.modulator = nn.Linear(out_features, 1)
        self.modfanout = nn.Linear(1, out_features)  # per-neuron
        self.reset_parameters()

    def reset_parameters(self):
        nn.init.xavier_uniform_(self.weight)  # Xavier initialization
        nn.init.xavier_uniform_(self.alpha)

    def forward(self, x, hebb):
        x = F.pad(x, (0, 1), "constant", 1.0)  # bias
        weight = self.weight + self.alpha * hebb
        y = torch.tanh(self.ln((x.unsqueeze(1) @ weight).squeeze(1)))
        # neuromodulated plasticity update
        m = torch.tanh(self.modulator(y))
        eta = self.modfanout(m.unsqueeze(2))
        delta = eta * (x.unsqueeze(2) @ y.unsqueeze(1))
        new_hebb = torch.clamp(hebb + delta, min=-self.clip, max=self.clip).detach()  # detach to avoid in-place update issues
        return y, m, new_hebb

class Actor(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim, learning_rate=1e-4):
        super(Actor, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, hidden_dim)
        self.fc3 = nn.Linear(hidden_dim, output_dim)
        self.tanh = nn.Tanh()
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)

    def forward(self, state):
        x = torch.relu(self.fc1(state))
        x = torch.relu(self.fc2(x))
        x = self.tanh(self.fc3(x))
        return x

class Critic(nn.Module):
    def __init__(self, state_dim, action_dim, hidden_dim, learning_rate=1e-4):
        super(Critic, self).__init__()
        self.fc1 = ModulatedPlasticDense(state_dim, hidden_dim)
        self.fc2 = ModulatedPlasticDense(hidden_dim + action_dim, hidden_dim)
        self.fc3 = nn.Linear(hidden_dim, 1)
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)
        self.hebb1 = torch.zeros(state_dim + 1, hidden_dim).to(device)
        self.hebb2 = torch.zeros(hidden_dim + action_dim + 1, hidden_dim).to(device)

    def forward(self, state, action):
        x, _, self.hebb1 = self.fc1(state, self.hebb1)
        x = torch.cat([x, action], dim=1)
        x, _, self.hebb2 = self.fc2(x, self.hebb2)
        x = self.fc3(x)
        return x

    def reset_hebb(self):
        self.hebb1 = torch.zeros(self.fc1.in_features + 1, self.fc1.out_features).to(device)
        self.hebb2 = torch.zeros(self.fc2.in_features + 1, self.fc2.out_features).to(device)

class ReplayBuffer:
    def __init__(self, max_size, batch_size):
        self.buffer = deque(maxlen=max_size)
        self.batch_size = batch_size

    def add(self, state, action, reward, next_state, done):
        self.buffer.append((state, action, reward, next_state, done))

    def sample(self):
        batch = random.sample(self.buffer, self.batch_size)
        states, actions, rewards, next_states, dones = zip(*batch)
        return states, actions, rewards, next_states, dones

    def __len__(self):
        return len(self.buffer)

class DDPG:
    def __init__(self, state_dim, action_dim, hidden_dim, buffer_size, batch_size, actor_lr, critic_lr, tau, gamma):
        self.actor = Actor(state_dim, hidden_dim, action_dim, actor_lr).to(device)
        self.actor_target = Actor(state_dim, hidden_dim, action_dim, actor_lr).to(device)
        self.critic = Critic(state_dim, action_dim, hidden_dim, critic_lr).to(device)
        self.critic_target = Critic(state_dim, action_dim, hidden_dim, critic_lr).to(device)
        self.memory = ReplayBuffer(buffer_size, batch_size)
        self.batch_size = batch_size
        self.tau = tau
        self.gamma = gamma
        self._update_target_networks(tau=1)  # initialize target networks
        print("DDPG agent initialized.")

    def act(self, state, noise=0.0):
        state = torch.tensor(state, dtype=torch.float32).unsqueeze(0).to(device)
        action = self.actor(state).detach().cpu().numpy()[0]
        return np.clip(action + noise, -1, 1)

    def store_transition(self, state, action, reward, next_state, done):
        self.memory.add(state, action, reward, next_state, done)

    def learn(self):
        if len(self.memory) < self.batch_size:
            return
        states, actions, rewards, next_states, dones = self.memory.sample()
        states = torch.tensor(states, dtype=torch.float32).to(device)
        actions = torch.tensor(actions, dtype=torch.float32).to(device)
        rewards = torch.tensor(rewards, dtype=torch.float32).unsqueeze(1).to(device)
        next_states = torch.tensor(next_states, dtype=torch.float32).to(device)
        dones = torch.tensor(dones, dtype=torch.float32).unsqueeze(1).to(device)

        # Update Critic
        self.critic.optimizer.zero_grad()
        with torch.no_grad():
            next_actions = self.actor_target(next_states)
            target_q_values = self.critic_target(next_states, next_actions)
            target_q_values = rewards + (1 - dones) * self.gamma * target_q_values
        current_q_values = self.critic(states, actions)
        critic_loss = nn.MSELoss()(current_q_values, target_q_values)
        critic_loss.backward()
        self.critic.optimizer.step()

        # Update Actor
        self.actor.optimizer.zero_grad()
        actor_loss = -self.critic(states, self.actor(states)).mean()
        actor_loss.backward()
        self.actor.optimizer.step()

        # Update target networks
        self._update_target_networks()

    def _update_target_networks(self, tau=None):
        if tau is None:
            tau = self.tau
        for target_param, param in zip(self.actor_target.parameters(), self.actor.parameters()):
            target_param.data.copy_(tau * param.data + (1 - tau) * target_param.data)
        for target_param, param in zip(self.critic_target.parameters(), self.critic.parameters()):
            target_param.data.copy_(tau * param.data + (1 - tau) * target_param.data)

def train_ddpg(env, agent, episodes, max_steps, noise_scale=0.1, noise_decay=0.99):
    scores_window = deque(maxlen=100)
    scores = []
    avg_scores = []
    for episode in range(1, episodes + 1):
        print(f"Episode {episode}/{episodes} started.")
        state = env.reset()
        agent.critic.reset_hebb()
        episode_reward = 0
        for step in range(max_steps):
            action = agent.act(state, noise_scale)
            next_state, reward, done, _ = env.step(action)
            agent.store_transition(state, action, reward, next_state, done)
            agent.learn()
            state = next_state
            episode_reward += reward
            if done:
                break
        scores_window.append(episode_reward)
        scores.append(episode_reward)
        avg_scores.append(np.mean(scores_window))
        noise_scale *= noise_decay
        print(f"Episode {episode} ended with reward: {episode_reward:.2f}")
        if episode % 10 == 0:
            print(f"Episode: {episode}, Avg Score of Last 100 Episodes: {np.mean(scores_window):.2f}")
        # Saving trained Networks
        torch.save(agent.actor.state_dict(), "actor_final.pth")
        torch.save(agent.critic.state_dict(), "critic_final.pth")
    return scores, avg_scores

if __name__ == "__main__":
    print("Starting training.")
    env = gym.make('AntBulletEnv-v0')
    print("Environment created.")
    state_dim = env.observation_space.shape[0]
    action_dim = env.action_space.shape[0]
    print(f"State dimension: {state_dim}, Action dimension: {action_dim}")
    hidden_dim = 256
    buffer_size = 1000000
    batch_size = 1024
    actor_lr = 1e-4
    critic_lr = 1e-3
    tau = 0.005
    gamma = 0.94
    episodes = 1000
    max_steps = 1000

    agent = DDPG(state_dim, action_dim, hidden_dim, buffer_size, batch_size, actor_lr, critic_lr, tau, gamma)
    scores, avg_scores = train_ddpg(env, agent, episodes, max_steps)

    plt.plot(scores)
    plt.plot(avg_scores)
    plt.xlabel('Episode')
    plt.ylabel('Score')
    plt.show()



