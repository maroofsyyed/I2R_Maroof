# -*- coding: utf-8 -*-
"""actor: hebb_lin(256), critic: hebb_lin_lin(256,256).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zlSPYLpbmHhPzLXCWuHUBR0AYbjw_GlQ
"""

class ModulatedPlasticDense(nn.Module):
    def __init__(self, in_features, out_features, clip=2.0):
        super().__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.clip = clip
        self.weight = nn.Parameter(torch.Tensor(in_features + 1, out_features))
        self.alpha = nn.Parameter(torch.Tensor(in_features + 1, out_features))
        self.ln = nn.LayerNorm(out_features)
        self.modulator = nn.Linear(out_features, 1)
        self.modfanout = nn.Linear(1, out_features)  # per-neuron
        self.reset_parameters()

    def reset_parameters(self):
        nn.init.kaiming_uniform_(self.weight, a=np.sqrt(5))
        nn.init.kaiming_uniform_(self.alpha, a=np.sqrt(5))

    def forward(self, x, hebb):
        x = F.pad(x, (0, 1), "constant", 1.0)  # bias
        weight = self.weight + self.alpha * hebb
        weight = self.ln(weight)  # Apply LayerNorm to the modulated weights
        y = torch.tanh(self.ln((x.unsqueeze(1) @ weight).squeeze(1)))
        # neuromodulated plasticity update
        m = torch.tanh(self.modulator(y))
        eta = self.modfanout(m.unsqueeze(2))
        delta = eta * (x.unsqueeze(2) @ y.unsqueeze(1))
        new_hebb = torch.clamp(hebb + delta, min=-self.clip, max=self.clip).detach()  # detach to avoid in-place update issues
        return y, m, new_hebb

class Actor(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim, learning_rate=1e-4):
        super(Actor, self).__init__()
        self.fc1 = ModulatedPlasticDense(input_dim, hidden_dim)
        self.ln1 = nn.LayerNorm(hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)
        self.tanh = nn.Tanh()
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)
        self.scheduler = optim.lr_scheduler.StepLR(self.optimizer, step_size=100, gamma=0.95)
        self.hebb1 = torch.zeros(input_dim + 1, hidden_dim).to(device)

    def forward(self, state):
        x, _, self.hebb1 = self.fc1(state, self.hebb1)
        x = self.ln1(x)
        x = self.tanh(self.fc2(x))
        return x

    def reset_hebb(self):
        self.hebb1 = torch.zeros(self.fc1.in_features + 1, self.fc1.out_features).to(device)

class Critic(nn.Module):
    def __init__(self, state_dim, action_dim, hidden_dim, learning_rate=1e-4):
        super(Critic, self).__init__()
        self.fc1 = ModulatedPlasticDense(state_dim, hidden_dim)
        self.ln1 = nn.LayerNorm(hidden_dim)
        self.fc2 = nn.Linear(hidden_dim + action_dim, hidden_dim)
        self.fc3 = nn.Linear(hidden_dim, 1)
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)
        self.scheduler = optim.lr_scheduler.StepLR(self.optimizer, step_size=100, gamma=0.95)
        self.hebb1 = torch.zeros(state_dim + 1, hidden_dim).to(device)

    def forward(self, state, action):
        x, _, self.hebb1 = self.fc1(state, self.hebb1)
        x = self.ln1(x)
        x = torch.cat([x, action], dim=1)
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

    def reset_hebb(self):
        self.hebb1 = torch.zeros(self.fc1.in_features + 1, self.fc1.out_features).to(device)

class OUNoise:
    def __init__(self, size, mu=0.0, theta=0.15, sigma=0.2):
        self.size = size
        self.mu = mu
        self.theta = theta
        self.sigma = sigma
        self.reset()

    def reset(self):
        self.state = np.ones(self.size) * self.mu

    def sample(self):
        x = self.state
        dx = self.theta * (self.mu - x) + self.sigma * np.random.randn(len(x))
        self.state = x + dx
        return self.state

class PrioritizedReplayBuffer:
    def __init__(self, max_size, batch_size, alpha=0.6):
        self.buffer = deque(maxlen=max_size)
        self.priorities = deque(maxlen=max_size)
        self.batch_size = batch_size
        self.alpha = alpha

    def add(self, state, action, reward, next_state, done):
        max_priority = max(self.priorities) if self.buffer else 1.0
        self.buffer.append((state, action, reward, next_state, done))
        self.priorities.append(max_priority)

    def sample(self, beta=0.4):
        if len(self.buffer) == self.buffer.maxlen:
            priorities = np.array(self.priorities)
        else:
            priorities = np.array(list(self.priorities)[:len(self.buffer)])

        priorities = priorities ** self.alpha
        probabilities = priorities / priorities.sum()

        indices = np.random.choice(len(self.buffer), self.batch_size, p=probabilities)
        samples = [self.buffer[idx] for idx in indices]

        total = len(self.buffer)
        weights = (total * probabilities[indices]) ** (-beta)
        weights = weights / weights.max()

        states, actions, rewards, next_states, dones = zip(*samples)
        return states, actions, rewards, next_states, dones, indices, weights

    def update_priorities(self, indices, priorities):
        for idx, priority in zip(indices, priorities):
            self.priorities[idx] = priority

    def __len__(self):
        return len(self.buffer)

class DDPG:
    def __init__(self, state_dim, action_dim, hidden_dim, buffer_size, batch_size, actor_lr, critic_lr, tau, gamma):
        self.actor = Actor(state_dim, hidden_dim, action_dim, actor_lr).to(device)
        self.actor_target = Actor(state_dim, hidden_dim, action_dim, actor_lr).to(device)
        self.critic = Critic(state_dim, action_dim, hidden_dim, critic_lr).to(device)
        self.critic_target = Critic(state_dim, action_dim, hidden_dim, critic_lr).to(device)
        self.memory = PrioritizedReplayBuffer(buffer_size, batch_size)
        self.noise = OUNoise(action_dim)
        self.batch_size = batch_size
        self.tau = tau
        self.gamma = gamma
        self._update_target_networks(tau=1)  # initialize target networks
        print("DDPG agent initialized.")

    def act(self, state, noise_scale=0.0):
        state = torch.tensor(state, dtype=torch.float32).unsqueeze(0).to(device)
        action = self.actor(state).detach().cpu().numpy()[0]
        noise = self.noise.sample() * noise_scale
        return np.clip(action + noise, -1, 1)

    def step(self, state, action, reward, next_state, done):
        self.memory.add(state, action, reward, next_state, done)
        if len(self.memory) > self.batch_size:
            experiences = self.memory.sample()
            self.learn(experiences)

    def learn(self, experiences):
        states, actions, rewards, next_states, dones, indices, weights = experiences

        states = torch.tensor(states, dtype=torch.float32).to(device)
        actions = torch.tensor(actions, dtype=torch.float32).to(device)
        rewards = torch.tensor(rewards, dtype=torch.float32).unsqueeze(1).to(device)
        next_states = torch.tensor(next_states, dtype=torch.float32).to(device)
        dones = torch.tensor(dones, dtype=torch.float32).unsqueeze(1).to(device)
        weights = torch.tensor(weights, dtype=torch.float32).unsqueeze(1).to(device)

        # Update critic
        next_actions = self.actor_target(next_states)
        next_Q = self.critic_target(next_states, next_actions)
        target_Q = rewards + (self.gamma * next_Q * (1 - dones))
        expected_Q = self.critic(states, actions)
        critic_loss = F.mse_loss(expected_Q, target_Q.detach(), reduction='none')
        critic_loss = (critic_loss * weights).mean()

        self.critic.optimizer.zero_grad()
        critic_loss.backward()
        self.critic.optimizer.step()

        # Update actor
        actions_pred = self.actor(states)
        actor_loss = -self.critic(states, actions_pred).mean()

        self.actor.optimizer.zero_grad()
        actor_loss.backward()
        self.actor.optimizer.step()

        # Update target networks
        self._update_target_networks()

        # Update priorities
        new_priorities = (critic_loss + 1e-5).cpu().detach().numpy().flatten()
        self.memory.update_priorities(indices, new_priorities)

    def _update_target_networks(self, tau=None):
        tau = self.tau if tau is None else tau
        for target_param, param in zip(self.actor_target.parameters(), self.actor.parameters()):
            target_param.data.copy_(tau * param.data + (1.0 - tau) * target_param.data)
        for target_param, param in zip(self.critic_target.parameters(), self.critic.parameters()):
            target_param.data.copy_(tau * param.data + (1.0 - tau) * target_param.data)

    def reset(self):
        self.noise.reset()
        self.actor.reset_hebb()
        self.critic.reset_hebb()

    def save(self, path):
        torch.save({
            'actor_state_dict': self.actor.state_dict(),
            'critic_state_dict': self.critic.state_dict(),
            'actor_target_state_dict': self.actor_target.state_dict(),
            'critic_target_state_dict': self.critic_target.state_dict(),
        }, path)

    def load(self, path):
        checkpoint = torch.load(path)
        self.actor.load_state_dict(checkpoint['actor_state_dict'])
        self.critic.load_state_dict(checkpoint['critic_state_dict'])
        self.actor_target.load_state_dict(checkpoint['actor_target_state_dict'])
        self.critic_target.load_state_dict(checkpoint['critic_target_state_dict'])

def train_ddpg(env_name, episodes=1000, max_t=1000, noise_scale=1.0):
    env = gym.make(env_name)
    state_dim = env.observation_space.shape[0]
    action_dim = env.action_space.shape[0]
    hidden_dim = 256
    buffer_size = int(2e6)
    batch_size = 1024
    actor_lr = 1e-4
    critic_lr = 1e-3
    tau = 4e-3
    gamma = 0.96

    agent = DDPG(state_dim, action_dim, hidden_dim, buffer_size, batch_size, actor_lr, critic_lr, tau, gamma)

    scores = []
    scores_window = deque(maxlen=100)

    for episode in range(1, episodes + 1):
        state = env.reset()
        agent.reset()
        score = 0

        for t in range(max_t):
            action = agent.act(state, noise_scale)
            next_state, reward, done, _ = env.step(action)
            agent.step(state, action, reward, next_state, done)
            state = next_state
            score += reward
            if done:
                break

        scores_window.append(score)
        scores.append(score)
        noise_scale = max(0.1, noise_scale * 0.995)  # decrease noise

        print(f'Episode {episode}\tAverage Score: {np.mean(scores_window):.2f}')

    return scores

if __name__ == '__main__':
    env_name = 'AntBulletEnv-v0'
    scores = train_ddpg(env_name)

    plt.plot(scores)
    plt.ylabel('Score')
    plt.xlabel('Episode')
    plt.show()