# -*- coding: utf-8 -*-
"""maze(9*9)(7*7_RF)_no_hebb_lin_fixed_reward.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hjiuypGWGybErVNne28alD_kG4gDrab8
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import numpy as np
import random
import math
from collections import namedtuple, deque
from types import SimpleNamespace

class MazeEnv:
    def __init__(self, labsize):
        self.LABSIZE = labsize
        self.lab = np.ones((labsize, labsize))
        self.reward_pos = (labsize - 2, labsize - 2)
        self._generate_maze()
        self.reset()
        self.action_space = SimpleNamespace(n=4, sample=lambda: random.randint(0, 3))

    def _generate_maze(self):
        self.lab[1:self.LABSIZE-1, 1:self.LABSIZE-1].fill(0)
        for row in range(1, self.LABSIZE - 1):
            for col in range(1, self.LABSIZE - 1):
                if row % 2 == 0 and col % 2 == 0:
                    self.lab[row, col] = 1

    def _set_random_agent_position(self):
        while True:
            row = random.randint(1, self.LABSIZE - 2)
            col = random.randint(1, self.LABSIZE - 2)
            if self.lab[row, col] == 0 and (row, col) != self.reward_pos:
                self.posr, self.posc = row, col
                break

    def reset(self):
        self._set_random_agent_position()
        return self._get_observation()

    def _get_observation(self):
        obs = np.zeros((7, 7))
        for i in range(7):
            for j in range(7):
                r = self.posr + i - 3
                c = self.posc + j - 3
                if 0 <= r < self.LABSIZE and 0 <= c < self.LABSIZE:
                    obs[i, j] = self.lab[r, c]
                else:
                    obs[i, j] = 1  # Treat out-of-bounds as walls

        obs[3, 3] = 0.5  # Mark the agent's position

        reward_row, reward_col = self.reward_pos
        if abs(reward_row - self.posr) <= 3 and abs(reward_col - self.posc) <= 3:
            obs[reward_row - self.posr + 3, reward_col - self.posc + 3] = 0.8

        return obs

    def step(self, action):
        tgtposr, tgtposc = self.posr, self.posc
        if action == 0:  # Up
            tgtposr -= 1
        elif action == 1:  # Down
            tgtposr += 1
        elif action == 2:  # Left
            tgtposc -= 1
        elif action == 3:  # Right
            tgtposc += 1

        reward = -0.01
        done = False
        if self.lab[tgtposr][tgtposc] == 1:
            reward = -0.1
        else:
            self.posr, self.posc = tgtposr, tgtposc
            if (self.posr, self.posc) == self.reward_pos:
                reward = 10.0
                self._set_random_agent_position()  # Teleport to a random location

        return self._get_observation(), reward, done

class DQN(nn.Module):
    def __init__(self, n_observations, n_actions):
        super(DQN, self).__init__()
        self.layer1 = nn.Linear(n_observations, 128)
        self.layer2 = nn.Linear(128, 128)
        self.layer3 = nn.Linear(128, n_actions)

    def forward(self, x):
        x = F.relu(self.layer1(x))
        x = F.relu(self.layer2(x))
        return self.layer3(x)

Transition = namedtuple('Transition', ('state', 'action', 'next_state', 'reward'))

class ReplayMemory(object):
    def __init__(self, capacity):
        self.memory = deque([], maxlen=capacity)

    def push(self, *args):
        self.memory.append(Transition(*args))

    def sample(self, batch_size):
        return random.sample(self.memory, batch_size)

    def __len__(self):
        return len(self.memory)

def select_action(state, steps_done):
    sample = random.random()
    eps_threshold = EPS_END + (EPS_START - EPS_END) * math.exp(-1. * steps_done / EPS_DECAY)
    if sample > eps_threshold:
        with torch.no_grad():
            return policy_net(state).max(1)[1].view(1, 1)
    else:
        return torch.tensor([[env.action_space.sample()]], device=device, dtype=torch.long)

def optimize_model():
    if len(memory) < BATCH_SIZE:
        return
    transitions = memory.sample(BATCH_SIZE)
    batch = Transition(*zip(*transitions))

    non_final_mask = torch.tensor(tuple(map(lambda s: s is not None, batch.next_state)), device=device, dtype=torch.bool)
    non_final_next_states = torch.cat([s for s in batch.next_state if s is not None])

    state_batch = torch.cat(batch.state)
    action_batch = torch.cat(batch.action)
    reward_batch = torch.cat(batch.reward)

    state_action_values = policy_net(state_batch).gather(1, action_batch)

    next_state_values = torch.zeros(BATCH_SIZE, device=device)
    with torch.no_grad():
        next_state_values[non_final_mask] = target_net(non_final_next_states).max(1)[0]

    expected_state_action_values = (next_state_values * GAMMA) + reward_batch

    criterion = nn.SmoothL1Loss()
    loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))

    optimizer.zero_grad()
    loss.backward()
    torch.nn.utils.clip_grad_value_(policy_net.parameters(), 100)
    optimizer.step()

# Hyperparameters
BATCH_SIZE = 256
GAMMA = 0.94
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 1000
TAU = 0.005
LR = 1e-4

# Initialize environment and networks
env = MazeEnv(labsize=11)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

n_actions = 4  # Up, Down, Left, Right
n_observations = 7 * 7  # 5x5 receptive field

policy_net = DQN(n_observations, n_actions).to(device)
target_net = DQN(n_observations, n_actions).to(device)
target_net.load_state_dict(policy_net.state_dict())

optimizer = optim.AdamW(policy_net.parameters(), lr=LR, amsgrad=True)
memory = ReplayMemory(10000)

steps_done = 0
episode_durations = []
recent_rewards = deque(maxlen=100)  # To store rewards for the last 100 episodes

# Training loop
num_episodes = 5000

for i_episode in range(num_episodes):
    state = env.reset()
    state = torch.tensor(state.flatten(), dtype=torch.float32, device=device).unsqueeze(0)
    total_reward = 0

    for t in range(200):  # Max 200 steps per episode
        action = select_action(state, steps_done)
        steps_done += 1

        observation, reward, done = env.step(action.item())
        reward = torch.tensor([reward], device=device)
        total_reward += reward.item()

        next_state = torch.tensor(observation.flatten(), dtype=torch.float32, device=device).unsqueeze(0)

        memory.push(state, action, next_state, reward)
        state = next_state

        optimize_model()

        target_net_state_dict = target_net.state_dict()
        policy_net_state_dict = policy_net.state_dict()
        for key in policy_net_state_dict:
            target_net_state_dict[key] = policy_net_state_dict[key]*TAU + target_net_state_dict[key]*(1-TAU)
        target_net.load_state_dict(target_net_state_dict)

    recent_rewards.append(total_reward)  # Store the reward of the current episode
    avg_recent_reward = np.mean(recent_rewards)  # Calculate average reward over the last 100 episodes

    if i_episode % 1 == 0:
        print(f"Episode {i_episode}/{num_episodes}, Total Reward: {total_reward:.2f}, Avg Reward (last 100 episodes): {avg_recent_reward:.2f}")

print("Training complete")



